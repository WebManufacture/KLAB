  <script>
    $$.InitMiniMenu = function(element)
  {
    element.ShowFullSizeMenu = function() {
      if (!$(this).hasClass("docked"))
      $(this).addClass("fullSize");
    }
    
    element.HideFullSizeMenu = function() {
      if (!$(this).hasClass("docked"))
      $(this).removeClass("fullSize");
    }

    element.DockUndockMenu = function()
    {
      var menu = $(this.parentNode);
      if (!menu.hasClass("docked"))
      {
      menu.draggable({ disabled: true });
      }
      else
      {
      menu.draggable({ disabled: false});
      menu.removeClass("fullSize");
      } 
      menu.toggleClass("docked");
      menu.toggleClass("floating");
    }
    
    element.ProcessElement = function(event){
      var commands = $(">.command", this);
      for (var i = 0; i < commands.length; i++)
      {
        $$.ProcessMessage(commands[i].outerHTML, this.parentNode);
      }
    }
      
    element.ChangeElement= function(event, ui){
      var proto = $("#MiniMenuSystemPrototype .text-file-command").clone();
      var name = ui.draggable.attr("name");
      proto.attr("file-name", name);
      //var span = "<span class='file-name'>" + name + "</span>";
      $(event.target).html(proto);
      //$(event.target).prepend(span);
      //$(event.target).attr("icon", "document.png");
      $(event.target).addClass("changed");
      //InitMenuItem(event.target);
    }
      
    element.PrepareAjaxSave = function()
    {
      var servajax = $("#MiniMenuSystemPrototype .server_jasp_ajax").clone();
      var url = servajax.attr("url");
      url += $(this).attr("url");
      servajax.attr("url", url)
      var changed = $(".menuitem.unsaved", this);
      var ssproto = $("#MiniMenuSystemPrototype .server-save-prototype");
    for (var i=0; i < changed.length; i++)
        {
           var proto = ssproto.clone();
           proto.html($(changed[i]).clone());
           servajax.append(proto);
        }
        
        var changed = $(".menuitem.changed", this);
        var ssproto = $("#MiniMenuSystemPrototype .server-set-prototype");
        
    for (var i=0; i < changed.length; i++)
        {
           var proto = ssproto.clone();
           var id = changed[i].getAttribute("id");
           if (id == "" || id == undefined)
           continue;
           proto.html(changed[i].innerHTML);
           proto.attr("selector", proto.attr("selector") + id);
           servajax.append(proto);
        }
        
        $("#server_jasp_ajax .menuitem.unsaved").removeClass("unsaved"); 
    alert(servajax.html());
        $$.ProcessMessage(servajax[0]);
    }
      
    $(element).prepend($("#MiniMenuSystemPrototype .newMenuPrototype").html());
    $(">.menuitem", element).click(element.ProcessElement);
    $(">.menuitem", element).droppable({ accept: ".File.ui-item", activeClass: "drop-ready", hoverClass: "drop-selected", drop: element.ChangeElement});
    $(".doc-button", element).click(element.DockUndockMenu);
    $(".addNewBookmark-button set", element).attr("selector", "#" + element.getAttribute("id"));
    $(element).mouseover(element.ShowFullSizeMenu);
    $(element).mouseleave(element.HideFullSizeMenu);
    $(element).draggable();  
    InitMenuItems(element);    
  }
</script>
<prototypes id="MiniMenuSystemPrototype" class="MiniMenuSystemPrototype">  
  <prototypes class="newMenuPrototype">
    <div class="dock-indicator">
    </div>
    <div class="menuitem doc-button" ></div>
    <div class="addNewBookmark-button menuitem" icon='onebit_31.png'>
      <set class="command" type="append" target-id="NewMiniMenuItem">
         <div class="menuitem newBookmarkMenu">
            <span class="title"></span>
            <div class="command">
            </div>
         </div>
      </set>
    </div>
    <div class="menu-save-button menuitem" icon='save.png'>
      <eval class="command">
         $("#bokmarks-menu")[0].PrepareAjaxSave();   
      </eval>
      
      <eval class="command">
        $(".menuitem.unsaved").removeClass("unsaved");
      </eval>
    </div>
  </prototypes>
  <ajax class="server_jasp_ajax" method="POST" urlbase="system" url="System.jasp.ashx?action=process&system=">

  </ajax>
  <eval class="command text-file-command">
    TextSystem.ShowTextEditor(escape($$.Current.getAttribute("file-name")));
  </eval>
  <set class="server-save-prototype" selector=".mini-menu" type="append" >
          
  </set>
  <set class="server-set-prototype"  selector="#" type="inner" >
          
  </set>
</prototypes>
<eval class="jasp-message" event-id="NewMiniMenuItem" permanent="true">
  var selector = $("messages>set[target-id='NewMiniMenuItem']:first").attr("selector");
  var newBookmarkMenu = $(selector + ">.newBookmarkMenu");
  //alert(newBookmarkMenu.length);
  if (newBookmarkMenu.length > 0){
    var id = "menu" + Math.random(100000);
  id = id.replace(".", "");
    newBookmarkMenu.attr("id", id);
    newBookmarkMenu.click($(selector)[0].ProcessElement);
    newBookmarkMenu.droppable({ accept: ".File.ui-item", activeClass: "drop-ready", hoverClass: "drop-selected", drop: $(selector)[0].ChangeElement});
  
    InitMenuItem(newBookmarkMenu[0]); 
    newBookmarkMenu.removeClass("newBookmarkMenu");
    newBookmarkMenu.addClass("unsaved");
  }
</eval>
  
  <style type="text/css">
   
   .mini-menu
   {
  overflow: hidden;
    z-index: 150;
    position: fixed;
   }
   
  .mini-menu.floating
  {
    top: 0px;
    right: 0px;
    width: 55px;
    height: 75px;
    opacity: 0.7;
    background-color: rgba(255,255,255,0.3);
    border: solid 1px gray;
  }
  
  .mini-menu .menuitem.windowed
  {
    width: 200px;
    height: 200px;
  }

  .mini-menu.fullSize
  {
    height: 100%;
  }

  .mini-menu.docked
  {
    top: 0px!important;
    left: 0px!important;
    height: 100%;
    float: left;
  width: 55px;
  }

  
  
  .mini-menu:hover
  {
    opacity: 1;
  z-index: 160;
  }

  .mini-menu .menu
  {
    position: absolute;
    top: 0px;
    left: 55px;
    width: 155px;
    overflow: hidden;
    color: Black;
    z-index: 180;
    display: none;
  }
  
  
  .mini-menu .menuitem
  {
    float:none;
  }
  
  
  .mini-menu .doc-button
  {
    background: url('arrow_left.png') no-repeat;
    backgrouind-color: white;
    background-size: 50px;
    -moz-background-size: 50px;
  }
    
  .mini-menu.docked .doc-button
  {
    background: url('arrow_right.png') no-repeat;
  background-size: 50px;
    -moz-background-size: 50px;
  }
  
  .mini-menu .menuitem .command
  {
    display: none;
  }

  

  .mini-menu .dock-indicator{
    border: solid 1px black;
    width: 96%;
    height: 20px;
    background-color: rgb(20, 120, 30);
    color: white;
  }
    
  .mini-menu .advanced-separator{
    border: solid 1px black;
    width: 96%;
    height: 20px;
    background-color: #3366FF;
    color: white;
    margin-top: 20px;
    margin-bottom: 10px;
  }

  .mini-menu .dock-indicator.boobs{
    background-color: red!important;
  }
    
  .mini-menu .mini-menu.docked .dock-indicator
  {
    background-color: rgb(170, 50, 150);
  }
    
  .mini-menu.docked .dock-indicator .undock
  {
     display:inline;
  }

  .mini-menu.docked .dock-indicator .dock
  {
     display:none;
  }

    

  </style>
