<include url="system.dragging.htm"></include>
<script type="text/javascript">
	Stickers = {};
	
	Stickers.AutoApplyInterval = 20000;
	
	Stickers.Create = function(parent){
		var sticker = parent.adv("sticker fixed-width");
		Stickers.InitSticker(sticker);	
		Stickers.Save();
		return sticker;
	};
	
	Stickers.InitSticker = function(sticker){
		sticker.Ver = Stickers.Ver;
		sticker.IncVer = Stickers.IncVer;
		if (sticker.id == undefined || sticker.id == null || sticker.id == ""){
			do
			{
				var id = ("sticker" + Math.random()).replace("0.", '');
			}
			while(W.get("#" + id) != null);
			sticker.id = id;
		}
		var ctrl = sticker.get(".controls");
		if (ctrl == null){
			var ctrl = sticker.adv("controls");
		}
		var rm = sticker.get(".remove");
		if (rm == null){
			rm = ctrl.adv("remove");
		}
		var cs = sticker.get(".cstyle");
		if (cs == null){
			cs = ctrl.adv("cstyle");
		}
		cs.onclick = Stickers.ChangeStyle;
		rm.onclick = Stickers.Remove;
		sticker.text = sticker.get('.text');
		if (sticker.text == null){
			sticker.text = sticker.adv("text", 'Тут можно писать текст');
		}
		sticker.resizer = sticker.get('.resizer');
		if (sticker.has('resizable') && !check(sticker.resizer)){
			sticker.edit = sticker.add(W.tag('textarea', 'sticker-edit', 'Тут можно писать текст'));
		}
		sticker.text.onclick = Stickers.Click;
		sticker.edit = sticker.get('.sticker-edit');
		if (sticker.edit == null){
			sticker.edit = sticker.add(W.tag('textarea', 'sticker-edit', 'Тут можно писать текст'));
		}
		sticker.edit.value = sticker.text.html();
		sticker.edit.onclick = Stickers.EditClick;
		sticker.edit.hide();
		sticker.edit.onblur = Stickers.StickerBlur;
		sticker.edit.onkeypress = Stickers.StickerChange;
		Drag.MakeDraggable(sticker, "self");
		sticker.OnDrop = Stickers.DropComplete;
		
	};
	
	
	Stickers.Init = function(){
		Net.get("StickersSave.htm?rnd=" + Math.random(), Stickers.LoadComplete);
	};
	
	
	Stickers.LoadComplete = function(result){
		var result = this.responseText;
		var res = W.div();
		res.html(result);
		var s = res.findAll(".sticker");
		for (var i=0; i < s.length; i++){
			var n = s[i];
			if(n.id){
				var exists = W.get("#" + n.id);
				if (exists){
					if (n.has("removed")){
						exists.del();
						continue;
					}
					if (exists.Ver() < Stickers.Ver(n)){
						exists.del();
					}
					else{
						continue;
					}
				}
				else{
					if (n.has("removed")){
						continue;
					}
				}
			}
			W.Body.add(n);
			Stickers.InitSticker(n);
		}
		Stickers.loadTimeout = window.setTimeout(Stickers.Init, 2000);
	};
	
	Stickers.Click = function(event){
		var s = this.findParent(".sticker");
		s.text.hide();
		s.edit.show();
		s.edit.focus();
		s.cls("editing");
		s.Timeout = window.setTimeout(Stickers.Timeout, Stickers.AutoApplyInterval);
		event.cancelBubble = true;
		return false;
	};
	
	Stickers.EditClick = function(event){
		var s = this.findParent(".sticker");
		event.cancelBubble = true;
		return true;
	};
	
	Stickers.Timeout = function(event){
		var s = W.get(".sticker.editing");
		if (s == null) return;
		s.rcs("editing");
		s.edit.hide();
		s.text.html(s.edit.value);
		s.IncVer();
		s.text.show();
		Stickers.Save();
		return true;
	};
	
	Stickers.StickerChange = function(event){
		var s = this.findParent(".sticker");
		window.clearTimeout(s.Timeout);
		s.Timeout = window.setTimeout(Stickers.Timeout, Stickers.AutoApplyInterval);
		return true;
	};
	
	Stickers.StickerBlur = function(event){
		var s = this.findParent(".sticker");
		s.rcs("editing");
		this.hide();
		s.text.html(this.value);
		s.text.show();
		s.IncVer();
		window.clearTimeout(s.Timeout);
		Stickers.Save();
		return true;
	};
	
	
	Stickers.Ver = function(elem){
		if (!Check(elem)) elem = this;
		elem.ver = elem.attr("version");
		if (elem.ver == null) {
			elem.ver = "1";
			elem.attr("version", elem.ver);
		}
		elem.ver = parseInt(elem.ver);
		return elem.ver;
	};
	
	Stickers.IncVer = function(){
		this.ver = this.Ver() + 1;
		this.attr("version", this.ver);
		return this.ver;
	};
	
	Stickers.Del = function(s){
		s.cls("removed");
		window.clearTimeout(s.Timeout);
		Stickers.Save();
	};
	
	Stickers.Remove = function(event){
		var s = this.findParent(".sticker");
		s.cls("removed");
		window.clearTimeout(s.Timeout);
		Stickers.Save();
	};
	
	Stickers.DropComplete = function(drop){
		this.IncVer();
		Stickers.Save();
	};
	
	
	Stickers.ChangeStyle = function(event){
		var s = this.findParent(".sticker");
		if (s.has("yellow")){
			Stickers.SetStyle(s, "green");
			return;
		}
		if (s.has("green")){
			Stickers.SetStyle(s, "blue");
			return;
		}
		if (s.has("blue")){
			Stickers.SetStyle(s, "yellow");
			return;
		}
		Stickers.SetStyle(s, "green");
	};
	
	Stickers.SetStyle = function(s, style){
		s.IncVer();
		if (style == "yellow"){
			s.cls("yellow");
			s.rcs("green");
			s.rcs("blue");
			Stickers.Save();
			return;
		}
		if (style == "green"){
			s.rcs("blue");
			s.cls("green");
			s.rcs("yellow");
			Stickers.Save();
			return;
		}
		if (style == "blue"){
			s.rcs("yellow");
			s.cls("blue");
			s.rcs("green");
			Stickers.Save();
			return;
		}
		s.cls(style);
		s.rcs("yellow");
		s.rcs("blue");
		s.rcs("green");
		Stickers.Save();
	};
	
	Stickers.Save = function(){
		var s = W.findAll(".sticker:not(.proto)");
		var req = Net.POST("StickersSave.htm", s.html(), function(){});
	};
	
	W.OnLoad(Stickers.Init);
</script>

<style type="text/css">
	body>div.sticker{
		display: block!important;
	}
	
	.sticker{
		position: absolute;
		width: 160px;
		height: 140px;
		background-image: url('http://system.web-manufacture.net/Images/sticker_yellow.png');
		background-repeat: no-repeat;
		padding: 2px;
		padding-right: 
			-moz-user-select:text;		
		-webkit-user-select:text;
		box-sizing: border-box;
		-moz-box-sizing: border-box;
		-webkit-box-sizing: border-box;
	}
	
	.sticker.green{
		background-image: url('http://system.web-manufacture.net/Images/sticker_green.png');
		background-repeat: no-repeat;
	}
	
	.sticker.yellow{
		background-image: url('http://system.web-manufacture.net/Images/sticker_yellow.png');
		background-repeat: no-repeat;
	}
	
	.sticker.blue{
		background-image: url('http://system.web-manufacture.net/Images/sticker_blue.png');
		background-repeat: no-repeat;
	}
	
	.sticker.transparent{
		background-image: none;
		border: dotted 1px red;
	}
	
	.sticker.transparent textarea{
	}
	
	
	.sticker.removed{
		display: none!important;
	}
	
	.sticker .controls
	{
		padding-right: 3px;
		height: 20px;
	}
	
	.sticker.important .controls
	{
		background-color: rgba(255, 0, 100, 0.3);
	}
	
	.sticker .controls div
	{
		float: right;
		width: 16px;
		height: 16px;
	}
	
	.sticker .controls .remove
	{
		background-image: url("http://system.web-manufacture.net/Images/gtk-close.png");
		background-repeat: no-repeat;
		background-position: -3px -3px;
		border: solid 1px white;
	}
	
	.sticker .controls .cstyle
	{
		background-image: url("http://system.web-manufacture.net/Images/catalog-dot.png");
		background-repeat: no-repeat;
		background-position: 3px 3px;
		border: solid 1px white;
	}
	
	.sticker .controls div:hover
	{
		border: dotted 1px gray;
	}
	
	
	.sticker .text{
		clear: both;
		height: 100%;
		width: 100%;
	}
	
	.sticker textarea{
		clear: both;
		width: 143px;
		height: 123px;	
		background: none;
		border: none;
		-moz-user-select:text;
		-webkit-user-select:text;
	}
</style>