<!DOCTYPE html>
<html manifest="/TextEditor.manifest">
	<head>
		<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
		<link type='text/css' rel='stylesheet' href="http://Services.web-manufacture.net/Styles/System.default.css" />
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Utils.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/DOM.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Events.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Log.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Url.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Ajax.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Jasp.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Modules.js"></script>
		
		<script type="text/javascript" src="http://services.web-manufacture.net/External/CodeMirror-3.0/lib/CodeMirror.js"></script>
		<link rel="stylesheet" href="http://services.web-manufacture.net/External/CodeMirror-3.0/lib/codemirror.css" />
		<script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/search/search.js"></script>
		<script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/search/searchcursor.js"></script>
		<script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/search/match-highlighter.js"></script>
		<script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/hint/show-hint.js"></script>		
		<script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/hint/javascript-hint.js"></script>
		<link rel="stylesheet" href="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/hint/show-hint.css" />
		<script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/edit/closetag.js"></script>
		<script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/edit/matchbrackets.js"></script>
		<script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/fold/foldcode.js"></script>
		<script src="http://services.web-manufacture.net/External/CodeMirror-3.0/mode/javascript/javascript.js"></script>
		<script src="http://services.web-manufacture.net/External/CodeMirror-3.0/mode/htmlmixed/htmlmixed.js"></script>
		<script src="http://services.web-manufacture.net/External/CodeMirror-3.0/mode/css/css.js"></script>
		<script src="http://services.web-manufacture.net/External/CodeMirror-3.0/mode/xml/xml.js"></script>
		<script type="text/javascript" key="TextEditor">
			
			CodeMirror.commands.autocomplete = function(cm) {
				CodeMirror.simpleHint(cm, CodeMirror.javascriptHint);
			};
			
			Notify = {};
			
			
			Notify.Show = function (message) {
				var nf = DOM("#Notify");
				var ev = nf.div(".event.first", (new Date()).formatTime() + " " + message);
				nf.show();
				nf.ins(ev);
				Notify.setTimeout();
			};
			
			Notify.Error = function (error) {
				var nf = DOM("#Notify");
				var ev = nf.div(".event.error.first", (new Date()).formatTime() + " " + error);
				nf.show();
				nf.ins(ev);
				Notify.setTimeout();
			};
			
			Notify.setTimeout = function () {
				if (Notify.timeout) {
					window.clearTimeout(Notify.timeout);
				}
				Notify.timeout = window.setTimeout(Notify.clearFirst, 3000);
			};
			
			Notify.clearFirst = function () {
				DOM.all("#Notify .event.first").del(".first");
			};
			
			function XH() {
				var xmlhttp;
				xmlhttp = new XMLHttpRequest();
				return xmlhttp;
			};
			
			Editor = {};
			
			Editor.Init = function () {
				var url = null;
				Editor.fileName = null;
				var req = XH();
				if (Request.Params.url) {
					Editor.fileName = Request.Params.url;
					url = Request.GetUrl(Editor.fileName);					
					DOM("#urlBar").set(null, url);
				}
				if (Request.Params.file) {
					url = Editor.fileName = Request.Params.file;
					if (Request.Params.UserDomain){
						url = "http://" + Request.Params.UserDomain + "/System.Handler.ashx?action=get&file=" + url;
						if (Request.Params.SystemPath){
							url += "&path=" + Request.Params.SystemPath;
						}
					}
					else{
						if (Request.Params.SystemPath){
							url = Request.Params.SystemPath + "/" + url;
						}	
					}					
					DOM("#urlBar").hide();
					if (url.contains("?")){
						url += "&rnd=" + Math.random();
					}
					else{
						url += "?rnd=" + Math.random();
					}
				}
				if (!url) return;
				req.open("GET", url, true);			
				req.onload = Editor.LoadFileComplete;
				req.send(null);
				Editor.HistoryKey = 'dateArray_' + Request.Params.UserDomain + "/" + Request.Params.SystemPath + "/" + Editor.fileName
				window.onkeypress = Editor.KeyHandler;
			};
			
			Editor.GoUrl = function(url){
				if (url){
					window.location = "TextEditor.htm?url=" + encodeURIComponent(url);
				}
			};
			
			Editor.LoadFileComplete = function (result) {
				result = this.responseText;
				var parsers = "";
				var header = this.getResponseHeader("Content-Type");
				if (header != null) {
					if (header.Contains(["text/html", "text/aspx", "text/htm"])) {
						parsers = "text/html";
					}
					if (header.Contains(["text/javascript", "application/javascript", "application/x-javascript", "text/js"])) {
						parsers = "javascript";
					}
					if (header.Contains("text/css")) {
						parsers = "css";
					}
					if (header.Contains("text/xml")) {
						parsers = "xml";
					}
				}
				
				Editor.TextEditor = CodeMirror(WS.Body, {
					mode: parsers,
					indentUnit: 4,
					wordWrap: true,
					indentWithTabs: true,
					smartIndent: true,
					lineNumbers: true,
					matchBrackets: true,
					highlightSelectionMatches: true,
					autoCloseTags: true,
					electricChars: true,
					extraKeys: {
						"Ctrl-Space": "autocomplete"
					} 
				});
				
				Editor.TextEditor.setValue(this.responseText);
				var title = WS.Header.add("<title>" + Editor.fileName + "</title>");
			};
			
			Editor.Reload = function () {
				var url = null;
				var req = XH();
				if (Request.Params.url) {
					url = Request.GetUrl(Request.Params.url, { AsText: true,  rnd: Math.random() });
				}
				if (Request.Params.file) {
					url = Editor.fileName = Request.Params.file;
					if (Request.Params.UserDomain){
						url = "http://" + Request.Params.UserDomain + "/System.Handler.ashx?action=get&file=" + url;
						if (Request.Params.SystemPath){
							url += "&path=" + Request.Params.SystemPath;
						}
					}
					else{
						if (Request.Params.SystemPath){
							url = Request.Params.SystemPath + "/" + url;
						}	
					}
					if (url.contains("?")){
						url += "&rnd=" + Math.random();
					}
					else{
						url += "?rnd=" + Math.random();
					}
				}
				if (!url) return;
				DOM(".menuitem.reload").add(".disabled");
				req.open("GET", url, true);
				req.onload = Editor.ReloadEnd;
				req.send(null);
			};
			
			Editor.ReloadEnd = function () {
				if (this.status == 200){
					Editor.TextEditor.setValue(this.responseText);				
					Notify.Show("Reloaded");
					
				}
				else{
					Notify.Error("Нет связи: " + this.status);
				}
				DOM(".menuitem.reload").del(".disabled");
			};
			
			Editor.GetFileUrl = function(){
				if (Request.Params.url){
					return Request.Params.url;
				}
				if (Request.Params.UserDomain){
					if (Request.Params.SystemPath){
						return "http://" + Request.Params.UserDomain + "/" + Request.Params.SystemPath + "/" + Editor.fileName;
					}
					else{
						return "http://" + Request.Params.UserDomain  + "/" + Editor.fileName;
					}
				}
				else{				
					if (Request.Params.SystemPath){
						return "/" + Request.Params.SystemPath + "/" + Editor.fileName;
					}
					else{
						return Editor.fileName;
					}
				}
			};
			
			Editor.SaveFile = function () {
				if (Editor.SaveInProgress && Editor.SaveRequest) {
					Editor.SaveRequest.abort();
					return;
				}
				if (Request.Params.url || Request.Params.file) {
					Editor.SaveInProgress = true;
					DOM(".menuitem.save").add(".disabled");
					var content = Editor.TextEditor.getValue();
					
					//код local storage
					var keyArray = [];
					var key1 = Editor.HistoryKey;
					var str = window.localStorage.getItem(key1);
					var i = 0;
					// if (str != null){
					if (str) {
						keyArray = str.split(",");
						i = keyArray.length;
					}
					
					if (i >= 20) { keyArray.shift(); i--; }
					
					var now = new Date();
					now = now.valueOf();
					
					keyArray[i] = now;
					var str = keyArray.join(",");
					window.localStorage.setItem(key1, str); //должна быть строка
					var key2 = (now + '_' + Request.Params.UserDomain + "/" + Request.Params.SystemPath + "/" + Editor.fileName);
					window.localStorage.setItem(key2, content);
					
					var req = XH();
					var url = "";
					
					if (Request.Params.url) {
						url = Request.GetUrl(Request.Params.url);
						req.open("PUT", url, true);
					}
					else {
						if (Request.Params.file) {
							url = Request.Params.file;
							if (Request.Params.UserDomain){
								url = "http://" + Request.Params.UserDomain + "/System.Handler.ashx?action=save&file=" + url;
								if (Request.Params.SystemPath){
									url += "&path=" + Request.Params.SystemPath;
								}
							}
							else{
								url = "/System.Handler.ashx?action=save&file=" + url;
								if (Request.Params.SystemPath){
									url += "&path=" + Request.Params.SystemPath;
								}
							}												
							req.open("POST", url, true);
						}
					}
					req.setRequestHeader("Content-Type", "text/plain");
					req.onreadystatechange = Editor.CheckError;
					req.onload = Editor.SaveComplete;
					req.onerror = Editor.SaveError;
					req.send(content);
					Editor.SaveRequest = req;
				}
				
			};
			
			Editor.SaveError = function () {
				Notify.Error("Ошибка сохранения!");
				DOM.get(".menuitem.save").del(".disabled");
				Editor.SaveInProgress = false;
			};
			
			Editor.CheckError = function () {
				if (this.readyState == 4 && this.status != 200){
					Notify.Error("Ошибка сохранения! " + this.statusCode);
					DOM.get(".menuitem.save").del(".disabled");
					Editor.SaveInProgress = false;
				}
			};
			
			Editor.ShowHistory = function () {
				//--------------------------------
				var vh = DOM.get("#VersionHistory"); //ссылка на див со списком сохранений
				vh.del(".invisible");
				vh.clear(); //.innerHTML = "";
				var keyArray = [];
				var str = window.localStorage.getItem(Editor.HistoryKey);
				if (str) {
					keyArray = str.split(",");
				}	
				
				for (var j = 0; j < keyArray.length; j++) {
					var saveDate = new Date(parseInt(keyArray[j]));
					if (isNaN(saveDate)) continue;
					var key2 = (keyArray[j] + '_' + Request.Params.UserDomain + "/" + Request.Params.SystemPath + "/" + Editor.fileName);
					var divST = vh.div(".saveTime.keyAr", saveDate.formatDateRus(".") + " " + saveDate.formatTime(".") + "    " + key2);
					divST.Key2 = key2;
					divST.onclick = Editor.LoadHistory;
					//var h=keyArray[j].getHours();
					//var h1=setHours(h);
					//var m=keyArray[j].getMinutes();
					//var m1=setMinutes(m);
					//var s=keyArray[j].getSeconds();
					//var s1=setSeconds(s);
					//var sTime= (h1 + ":" + m1 + ":" + s1);
					
					//divST.set(null, sTime);
					//divST.add(".keyAr");
					//divST.onclick = Editor.LoadHistory;
					
					//divST.saveDate = keyArray[j];				
				}
			};
			
			
			Editor.LoadHistory = function () {
				//this.saveDate;
				
				
				//var dte = new Date("129123934123");
				var content = window.localStorage.getItem(this.Key2);
				Editor.TextEditor.setValue(content);
				Notify.Show("Reloaded fom cache");
			};
			
			Editor.SaveComplete = function () {
				var status = DOM.get(".header .status");
				var div = DOM.div(null, this.responseText);
				Notify.Show("Сохранено");
				DOM.get(".menuitem.save").del(".disabled");
				Editor.SaveInProgress = false;
			};
			
			Editor.RunFile = function () {
				if (Request.Params.url) {
					window.open(Request.GetUrl(Request.Params.url));
					return;
				}
				var url = Request.Params.file;
				if (Request.Params.SystemPath){
					url = Request.Params.SystemPath + "/" + url;
				}
				if (Request.Params.UserDomain){
					url = "http://" + Request.Params.UserDomain + "/" + url;
				}
				window.open(url);
			};
			
			Editor.TextReindentAll = function () {
				this.TextEditor.reindent();
			};
			
			Editor.KeyHandler = function (event) {
				// Ctrl + S event;
				if (event.ctrlKey && event.charCode == 115) {
					Editor.SaveFile();
					event.stopPropagation();
					event.preventDefault();
					return false;
				}
				if (event.ctrlKey && event.charCode == 104) {
					DOM("#hkHint").show();
					return false;
				}
				return true;
			};
			
			WS.DOMload(Editor.Init);
			
		</script>
		<style type="text/css">
			body{
				background-color: #fff;  				
			} 
			
			#urlBar{
				text-align: left;
				background-color: #FFFFCC;
				border: 1px solid black;
				border-radius: 4px;
				float: left;
				height: 26px;
				margin-right: 20px;
				margin-top: 13px;
				min-width: 200px;
				padding-left: 10px;
				padding-right: 10px;
				padding-top: 4px;
			}
			
			#VersionHistory
			{
				z-index: 11111;
				position: fixed;
				left: 40%;
				top: 40%;
				background-color: white;
				border: solid 1px red;
				width: 200px;
				height: 200px;
				opacity: 1;
				overflow-y:scroll;
			}
			
			#VersionHistory .keyAr{
				color: navy;
				cursor: pointer;
			}
			
			
			#VersionHistory .keyAr:hover{
				font-weight: bold;
			}
			
			.CodeMirror {
				padding-top: 50px;
				line-height: 1em;
				font-family: monospace;	
				height: 90%;
			}
			.CodeMirror-scroll{
				
			}
			
			.CodeMirror-lines {
				padding: .4em;
			}
			
			.CodeMirror-dialog
			{
				position: fixed;
				top: 100px;
				background: white;
				border: solid 1px black;
				opacity: 1;
				padding 10px 10px;
			}
			
			
			.CodeMirror-selected {
				background-color: #afe!important; 
			} 
			
			span.CodeMirror-matchingbracket {
				background: #ff5;
			}  
			
			.cm-matchhighlight { 
				background: #af5;
			}   
			
			
			
			#hkHint {
				position: absolute;
				top: 0; right : 0;
				background: rgba(255, 255, 255, 0.6);
				z-index: 100;
				border: solid 1px #ccc;
				border-radius: 10px;
				padding: 10px;
				width: 20%;
			}
			
			#hkHint h2{
				font-size:20px;
				margin: 2px;
			}
			
			#hkHint .hot-key{
				margin-bottom: 5px;
			}
			
			#hkHint .key-combination{
				font-weight: bold;
				display: block;
				padding-bottom: 2px;
			}
			
			.header.toolbar .menuitem.disabled{
				background-color: red;	
			}
			
			#Notify{
				background-color: white;
				border: 1px solid navy;
				border-radius: 10px 10px 10px 10px;
				cursor: default;
				font-size: 16px;
				height: 300px;
				text-align: left;
				width: 8%;
				opacity: 0.5;
				position: fixed;
				top: 1%;
				right: 1%;
				z-index: 20;
				padding: 7px;
				font-size: 12px;
				overflow: hidden;
			}
			
			#Notify .event{
				color: #333;
			}
			
			#Notify .event.first{
				background-color:yellow;
			}
			
			#Notify .event.error{
				color: red;
			}
			
			
			#Toolbar.toolbar {
				background-color: white;
				border: 1px solid darkorange;
				border-radius: 10px 10px 10px 10px;
				cursor: default;
				font-size: 16px;
				height: 55px;
				margin: 1%;
				text-align: center;
				width: 68%;
			}
			#Toolbar.header.toolbar {
				opacity: 0.2;
				position: fixed;
				top: 0;
				z-index: 20;
			}
			#Toolbar.toolbar .subbar {
				float: left;
				height: 55px;
				margin-left: 1%;
				margin-right: 1%;
				text-align: center;
			}
			#Toolbar.toolbar .menuitem {
				background-position: center center;
				background-repeat: no-repeat;
				border: 1px solid silver;
				border-radius: 10px 10px 10px 10px;
				cursor: pointer;
				display: block;
				float: left;
				font-size: 10px;
				height: 50px;
				margin: 2px;
				text-align: center;
				vertical-align: middle;
				width: 50px;
			}
			#Toolbar.toolbar .separator {
				float: left;
				height: 100%;
				width: 30px;
			}
			#Toolbar.toolbar:hover {
				background-color: #FFFFDD;
				border: 1px solid red;
				box-shadow: 2px 2px 1px silver;
				opacity: 1;
			}
			#Toolbar.toolbar .menuitem:hover {
				background-color: yellow;
			}
			
			
		</style>
	</head>
	<body>
		<div id='Notify'>
		</div>
		<div id='hkHint' class='invisible' onclick="this.hide();">
			<h2>
				Список новых фишек</h2>
			<hr />
			<ul>
				<li>Автозакрывание тагов</li>
				<li>Подсветка похожих выделенных слов</li>
				<li>Улучшено форматирование JS</li>
				<li>Поиск и замена</li>
				<li>Что-то еще, не помню что :)</li>
				<li>Исправлен глюк с выделением</li>
				<li>Исправлен глюк с длинной строкой</li>
				<li>Исправлен глюк с отменой</li>
				<li>Исправлен глюк с позицией воода</li>
				<li>Исправлен глюк с форматированием JS</li>
			</ul>
			<h2>
				Список горячих клавиш</h2>
			(работает только в Firefox)
			<hr />
			<div class='hot-key'>
				<span class='key-combination'>Shift + Tab </span>Переформатировать выделенный текст (отступы)
			</div>
			<div class='hot-key'>
				<span class='key-combination'>Ctrl + S </span>Сохранить
			</div>
			<div class='hot-key'>
				<span class='key-combination'>Ctrl + F, Ctrl + S, Ctrl + R </span>Найти текст\ (Следующий) \ (Предыдущий)
			</div>
			<div class='hot-key'>
				<span class='key-combination'>Ctrl + A </span>Выделить весь файл
			</div>
			<div class='hot-key'>
				<span class='key-combination'>Ctrl + X, Ctrl + C, Ctrl + V </span>Буфер обмена
			</div>
			<div class='hot-key'>
				<span class='key-combination'>Ctrl + Z, Ctrl + Shift + Z </span>Отменить\Вернуть
			</div>
			<div class='hot-key'>
				<span class='key-combination'>Ctrl + Пробел </span>Автодополнение (в доработке)
			</div>
		</div>
		
		<include url='http://services.web-manufacture.net/ui/Toolbars.htm'></include>
		
		<include url='http://services.web-manufacture.net/ui/FrameWin.htm'></include>
		<div id='Toolbar' class="header toolbar">
			<div class="menuitem save" tooltip="Сохранить" icon="http://system.web-manufacture.net/Images/save-mini.png" onclick="Editor.SaveFile();" style="background-image: url(http://system.web-manufacture.net/Images/save-mini.png);
background-position: 50% 50%; background-repeat: no-repeat no-repeat;">
			</div>
			<div class="menuitem save history" tooltip="История сохранений" icon="http://cdn1.iconfinder.com/data/icons/softwaredemo/PNG/32x32/Hourglass.png" onclick="Editor.ShowHistory();"
				style="background-image: url(http://cdn1.iconfinder.com/data/icons/softwaredemo/PNG/32x32/Hourglass.png); background-position: 50% 50%; background-repeat: no-repeat no-repeat;">
			</div>
			<div class="menuitem reload" tooltip="Перегрузить файл" icon="http://cdn1.iconfinder.com/data/icons/humility-icons-MERGE/24x24/stock/gtk-refresh.png" onclick="Editor.Reload();"
				style="background-image: url(http://cdn1.iconfinder.com/data/icons/humility-icons-MERGE/24x24/stock/gtk-refresh.png); background-position: 50% 50%;
background-repeat: no-repeat no-repeat;">
			</div>
			<div class="separator">
			</div>
			<div class="menuitem color" style="background-size: 48px; background-image: url(http://system.web-manufacture.net/Images/color.png); background-position: 50% 50%;
background-repeat: no-repeat no-repeat;" tooltip="Палитра" icon="http://system.web-manufacture.net/Images/color.png" onclick="if (window.CPalette) CPalette.Show(); else M.LoadModule('http://system.web-manufacture.net/ColorPalette.htm');">
			</div>
			<div class="menuitem" tooltip="CSS" icon="http://system.web-manufacture.net/Images/text-css.png" onclick="M.LoadModule('Designer.CssPalette.htm');" style="background-image: url(http://system.web-manufacture.net/Images/text-css.png);
background-position: 50% 50%; background-repeat: no-repeat no-repeat;">
			</div>		
			<div class='menuitem fixedsize' tooltip='CSS Кнопки' icon='http://i.imm.io/Bn2L.png' onclick='FrameWin.CreateWin("http://css3button.net/", 900, 800);'></div>
			<div class='menuitem fixedsize' tooltip='CSS Градиенты' icon='http://data.colorzilla.com/images/logo.png' onclick='FrameWin.CreateWin("http://www.colorzilla.com/gradient-editor/", 1000, 800);'></div>
			<div class='menuitem fixedsize' tooltip='CSS Анимация' icon='http://matthewlein.com/ceaser/images/test-box.png' onclick='FrameWin.CreateWin("http://matthewlein.com/ceaser/", 1000, 800);'></div>
			
			<div class='menuitem fixedsize' tooltip='CSS Трансформатор 2' icon='http://i.imm.io/Bn7q.png' onclick='FrameWin.CreateWin("http://www.css3maker.com/css3-transform.html", 1000, 800);'></div>
			
			
			<div class="separator">
			</div>
			<div class="menuitem" tooltip="RUN" icon="http://system.web-manufacture.net/Images/exec.png" onclick="window.open('system.index.htm?url=' + encodeURIComponent(Editor.GetFileUrl()));"
				style="background-image: url(http://system.web-manufacture.net/Images/exec.png); background-position: 50% 50%; background-repeat: no-repeat no-repeat;">
			</div>
			<div class="menuitem" tooltip="Запустить" icon="http://system.web-manufacture.net/Images/emblem-system.png" onclick="Editor.RunFile();" style="background-image: url(http://system.web-manufacture.net/Images/emblem-system.png);
background-position: 50% 50%; background-repeat: no-repeat no-repeat;">
				Запустить</div>
			<div class="separator">
			</div>
			<div id='urlBar' contenteditable='true'>
				
			</div>
			<div class='menuitem fixedsize' tooltip='Go URL' icon='' onclick='Editor.GoUrl(DOM("#urlBar").innerHTML);'></div>
			
			<div class="status">
			</div>
		</div>
		<div id='VersionHistory' class='invisible' onclick="this.hide();">
		</div>
	</body>
</html>
