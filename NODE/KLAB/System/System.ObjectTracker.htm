<style type="text/css">
  .object-content
  {
    width: 95%;
    height: 80%; 
    overflow: scroll;
    margin-right: 10px;
    margin-left: 10px;
  }
  
  .object-content .property
  {
    display: block;
  }
  
  .object-content .property:hover
  {
    text-shadow: 1px 1px 1px lightgray;
  }
  
  .object-content .function
  {
    color:navy;
  }
  
  .object-content .object
  {
    color:#00CC99;
  }
  
   .object-content .event
  {
    color:#AA00BB;
  }
</style>

<win class="object-content" type="smallwindow" title='Object Tracker'>
  
</win>

<script type="text/javascript">
    window.ObjectsTracker = {
	show: function(object, parent) {
	    var prototype = $("#objects-block").clone();
	    //prototype.load("System.ObjectTracker.htm", null, window.ObjectsTracker.OnPrototypeReady);
	    prototype[0].trackedObject = object;
	    $("#designer-block").append(prototype);
	    prototype.draggable({ cancel: "div.object-content" });
	    prototype.resizable();

	    var objects = $(".object-content", prototype);
	    objects.empty();
	    
	    if (parent != undefined) {
            $(".header", prototype).html(typeof (object) + " : " + parent);
        }
        else {
            $(".header", prototype).html(typeof (object) + " : " + object);
        }

        if (typeof (object) != "object") {
            objects.append(object + "");
        }
        else {
            for (line in object) {
                var type = typeof (object[line]);
                var span = document.createElement("span");
                span.setAttribute("class", 'property ' + type);
                span.setAttribute("type", type);
                span.setAttribute("name", line);
                span.innerHTML = type + " - " + line;
                if (type != "object" && type != "function") {
                    span.innerHTML += ": <span class='value'>" + object[line] + "</span>";
                }
                span.trackedObject = object[line];
                span.parent = object;
                objects.append(span);
            }
            $(".object-content .property", prototype).click(window.ObjectsTracker.OnNewObjectTracked);
        }
        prototype.show();

    },

    recursionTree: 0,

    GetSerializedTree: function(key, object, parent) {
        var html = "";
        var name = "window";
        if (parent != undefined) {
            name = parent;
        }
        var type = typeof (object);
        html += "<" + type + " name='" + name + "'>";

        if (type == "object" && object != null) {
            try {
                object.out_processed = key;
            }
            catch (ec) {
                html += "wraped-native";
                html += "</" + type + ">";
                return;
            }
            if (parent == "sessionStorage") {
                html += "wraped-native";
                html += "</" + type + ">";
                return;
            }
            try {
                for (line in object) {
                    if (line == null) {
                        continue;
                    }
                    try {
                        var child = object[line];
                    }
                    catch (e) {
                        html += "<not-implemented name='" + line + "'></not-implemented>";
                        continue;
                    }
                    if (line == "out_processed") {
                        continue;
                    }
                    if (child != null && child.out_processed != undefined && child.out_processed == key)
                        continue;
                    if (child == window) {
                        html += "<window name='" + line + "'></window>";
                        continue;
                    }
                    if (child == document) {
                        html += "<document name='" + line + "'></document>";
                        continue;
                    }

                    html += this.GetSerializedTree(key, child, line);
                }

            } catch (exc) {
                if (exc.message == "Security error") {
                    html += "wraped-native";
                }
                else {
                    alert(parent + " - " + object + "\n" + exc.message)
                    throw (exc);
                }
            }
        }
        else {
            html += object;
        }
        //this.ShowProgress(name)

        html += "</" + type + ">"
        return html;
    },

    OnNewObjectTracked: function() {
        window.ObjectsTracker.show(this.trackedObject, $(this).attr("name"));
    }
}

function SaveObjectsTree() {
    var key = Math.random();
    try {
        var tree = window.ObjectsTracker.GetSerializedTree(key, $("storage"));
    }
    catch (e) {
        alert(e.message);
        return;
    }
    $.post(GetSimpleHandler("State.xml"), tree, function() { ShowNotify("C��������!") });
} 

</script>




