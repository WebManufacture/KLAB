<!DOCTYPE html>
<html manifest="http://system.web-manufacture.net/TextEditor.manifest">
<head>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>

    <link href="../client/System.default.css" rel="stylesheet">
    <link type='text/css' rel='stylesheet' href="http://Services.web-manufacture.net/Styles/System.default.css"/>
    <script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.5?join=true"></script>

    <script src="../client/domjs_v1.5.js" type="text/javascript"></script>
    <script src="../client/WebSocketProxy.js" type="text/javascript"></script>


    <script src="../Client/ace_editor/ace.js" type="text/javascript" charset="utf-8"></script>
    <script src="../Client/ace_editor/ext-language_tools.js"></script>
    <script src="../Client/ace_editor/ext-elastic_tabstops_lite.js"></script>
    <script src="../Client/ace_editor/beautify.min.js"></script>
    <script src="../Client/ace_editor/beautify-css.min.js"></script>
    <script src="../Client/ace_editor/beautify-html.min.js"></script>

    <script type="text/javascript" key="TextEditor">

        Editor = {};

        MimeTypes = {
            htm: "text/html; charset=utf-8",
            html: "text/html; charset=utf-8",
            js: "text/javascript; charset=utf-8",
            css: "text/css; charset=utf-8",
            json: "text/json; charset=utf-8",
            png: "image/png",
            gif: "image/gif",
            jpg: "image/jpeg",
            bmp: "image/bmp",
            ttf: "font/truetype; charset=utf-8"
        };

        Editor.Init = function () {

            ace.require("ace/ext/language_tools");
            Editor.beautify = ace.require("ace/ext/beautify"); // get reference to extension


            var url = null;
            Editor.fileName = null;
            //window.localStorage.clear();
            if (Request.Params.url) {
                Editor.fileName = Request.Params.url;
                url = Request.GetUrl(Editor.fileName);
                DOM("#urlBar").value = url;
            }
            if (Request.Params.file) {
                url = Editor.fileName = Request.Params.file;
                if (Request.Params.UserDomain) {
                    url = "http://" + Request.Params.UserDomain + "/System.Handler.ashx?action=get&file=" + url;
                    if (Request.Params.SystemPath) {
                        url += "&path=" + Request.Params.SystemPath;
                    }
                }
                else {
                    if (Request.Params.SystemPath) {
                        url = Request.Params.SystemPath + "/" + url;
                    }
                }
                DOM("#urlBar").value = url;
                if (url.contains("?")) {
                    url += "&rnd=" + Math.random();
                }
                else {
                    url += "?rnd=" + Math.random();
                }
            }
            if (!url) {
                url = location.pathname;
                var paths = Url.Resolve(url).path;
                Editor.fileName = paths[paths.length - 1];
                DOM("#urlBar").value = Request.GetUrl(Editor.fileName);
            };

            var editor = Editor.TextEditor = ace.edit("EditorArea");
            var theme = window.localStorage.getItem("klab_ace_theme");
            if (!theme) theme = "ace/theme/ambiance";
            EditorThemeSelector.value = theme;
            editor.setTheme(theme);
            editor.setOptions({
                enableBasicAutocompletion: true,
                enableSnippets: true,
                enableLiveAutocompletion: true
            });

            ServiceProxy.Init('ws://localhost:5700').then(function (services) {
                ServiceProxy.Connect('FilesService').then(function (filesService) {
                    window.Server = filesService;
                    filesService.Watch(Editor.fileName, false).then((fpath) => {
                        filesService.on("watch", (change, path) => {
                            console.log("Файл изменился: " + path);
                            if (change == "change") {
                                Notify.Show("Файл изменился на сервере");
                                Editor.fileChanged();
                            }
                        });
                        console.log("Watching " + Editor.fileName);
                    }).catch((err) => {
                        console.log(err);
                    });
                    Editor.Reload();
                });
            });
            Editor.HistoryKey = 'dateArray_' + url;
            window.onkeydown = Editor.KeyHandler;
        };

        Editor.GoUrl = function (url, key) {
            if (url) {
                if (key) {
                    Net.POST(url, '', function (result) {
                        Notify.Show(result);
                    });
                }
                else {
                    Net.get(url, function (result) {
                        Notify.Show(result);
                    });
                }
            }
        };

        Editor.GoUrlAll = function (url, key) {
            if (url) {
                if (key) {
                    var channel = new HttpChannel(url, false);
                    channel.onRead.subscribe(function (result) {
                        Notify.Show(result);
                    });
                }
                else {
                    var channel = new HttpChannel(url, true);
                    channel.onRead.subscribe(function (result) {
                        Notify.Show(JSON.stringify(result));
                    });
                }
            }
        };

        Editor.LoadFileComplete = function (result) {
            var parsers = "";

            var mime = Editor.fileName.split(".");
            mime = mime[mime.length-1];

            var header = mime ? MimeTypes[mime] : "text/plain";

            if (header) {
                if (header.Contains(["text/html", "text/htm"])) {
                    parsers = "html";
                }
                if (header.Contains(["text/javascript", "application/javascript", "application/x-javascript", "text/js"])) {
                    parsers = "javascript";
                }
                if (header.Contains(["text/json", "application/json"])) {
                    parsers = "json";
                }
                if (header.Contains("text/css")) {
                    parsers = "css";
                }
                if (header.Contains("text/xml")) {
                    parsers = "xml";
                }
                if (header.Contains("text/plain")) {
                    parsers = "csharp";
                }
            }

            Editor.fileType = header;
            var editor = Editor.TextEditor;
            editor.session.setMode("ace/mode/" + (parsers ? parsers : "text"));
            let position = editor.getCursorPosition();
            editor.session.setValue(result, position);

            /*Editor.TextEditor.on("cursorActivity", function() {
        Editor.TextEditor.matchHighlight("CodeMirror-matchhighlight");
        });*/

            var title = WS.Header.add("<title>" + Editor.fileName + "</title>");
        };

        Editor.fileChanged = function () {
            DOM.get(".menuitem.reload").add(".active");
        };

        Editor.Reload = function () {
            var url = null;

            if (Request.Params.url) {
                url = Request.GetUrl(Request.Params.url, {AsText: true, rnd: Math.random()});
                var paths = Url.Resolve(url);
                Editor.fileName = paths.path[paths.path.length - 1];
            }
            if (Request.Params.file) {
                url = Editor.fileName = Request.Params.file;
            }
            if (!url) {
                url = location.pathname;
                var paths = Url.Resolve(url);
                Editor.fileName = paths.path[paths.path.length - 1];
            }
            //DOM(".menuitem.reload").add(".disabled");
            DOM.get(".menuitem.reload").del(".active");
            Server.Read(Editor.fileName).then(Editor.LoadFileComplete).catch(function (err) {
                if (err) {
                    Notify.Error("Нет связи: " + err);
                }
            });
        };

        Editor.GetFileUrl = function () {
            if (Request.Params.url) {
                return Request.Params.url;
            }
            if (Request.Params.UserDomain) {
                if (Request.Params.SystemPath) {
                    return "http://" + Request.Params.UserDomain + "/" + Request.Params.SystemPath + "/" + Editor.fileName;
                }
                else {
                    return "http://" + Request.Params.UserDomain + "/" + Editor.fileName;
                }
            }
            else {
                if (Request.Params.SystemPath) {
                    return "/" + Request.Params.SystemPath + "/" + Editor.fileName;
                }
                else {
                    return Editor.fileName;
                }
            }
        };


        Editor.Reformat = function(){
            var editor = Editor.TextEditor;
            var text = js_beautify(Editor.TextEditor.getValue());
            let position = editor.getCursorPosition();
            editor.setValue(text, position);
        };

        Editor.GetStorageKey = function (datetime) {
            var domain = Request.Params.UserDomain;
            if (!domain) domain = location.host;
            var path = Request.Params.SystemPath;
            if (!path) path = location.pathname.replace('/' + Editor.fileName, '');
            var key2 = (datetime + '_' + domain + "/" + path + "/" + Editor.fileName);
            return key2;
        };

        Editor.SaveFile = function () {
            if (Editor.SaveInProgress && Editor.SaveRequest) {
                Editor.SaveRequest.abort();
                return;
            }
            Editor.SaveInProgress = true;
            DOM(".menuitem.save").add(".disabled");
            var content = Editor.TextEditor.getValue();

            //код local storage
            var keyArray = [];
            var key1 = Editor.HistoryKey;
            var str = window.localStorage.getItem(key1);
            var i = 0;
            // if (str != null){
            if (str) {
                keyArray = str.split(",");
                i = keyArray.length;
            }

            if (i >= 20) {
                keyArray.shift();
                i--;
            }

            var now = new Date();
            now = now.valueOf();

            keyArray[i] = now;
            var str = keyArray.join(",");
            window.localStorage.setItem(key1, str); //должна быть строка
            var key2 = (Editor.GetStorageKey(now));
            //window.localStorage.setItem(key2, content);

            var url = "";

            if (Request.Params.url) {
                url = Request.GetUrl(Request.Params.url);
            }
            else {
                if (Request.Params.file) {
                    url = Request.Params.file;
                }
                else {
                    url = location.pathname;
                }
            }

            Server.Write(url, content).then(Editor.SaveComplete).catch(Editor.SaveError);
        };

        Editor.SaveError = function () {
            Notify.Error("Ошибка сохранения!");
            alert("Ошибка сохранения!!!!");
            DOM.get(".menuitem.save").del(".disabled");
            Editor.SaveInProgress = false;
        };

        Editor.ShowHistory = function () {
            //--------------------------------
            var vh = DOM.get("#VersionHistory"); //ссылка на див со списком сохранений
            vh.show();
            vh.all(".saveTime").del(); //.innerHTML = "";
            var keyArray = [];
            var str = window.localStorage.getItem(Editor.HistoryKey);
            if (str) {
                keyArray = str.split(",");
            }

            for (var j = 0; j < keyArray.length; j++) {
                var saveDate = new Date(parseInt(keyArray[j]));
                if (isNaN(saveDate)) continue;
                var key2 = (Editor.GetStorageKey(keyArray[j]));
                var divST = vh.div(".saveTime.keyAr", saveDate.formatDateRus(".") + " " + saveDate.formatTime(".") + "    " + Editor.fileName);
                divST.Key2 = key2;
                divST.onclick = Editor.LoadHistory;
                //var h=keyArray[j].getHours();
                //var h1=setHours(h);
                //var m=keyArray[j].getMinutes();
                //var m1=setMinutes(m);
                //var s=keyArray[j].getSeconds();
                //var s1=setSeconds(s);
                //var sTime= (h1 + ":" + m1 + ":" + s1);

                //divST.set(null, sTime);
                //divST.add(".keyAr");
                //divST.onclick = Editor.LoadHistory;

                //divST.saveDate = keyArray[j];
            }
        };


        Editor.LoadHistory = function () {
            //this.saveDate;
            //var dte = new Date("129123934123");
            var content = window.localStorage.getItem(this.Key2);
            Editor.TextEditor.setValue(content);
            Notify.Show("Reloaded fom cache");
        };

        Editor.SaveComplete = function () {
            var status = DOM.get(".header .status");
            var div = DOM.div(null, this.responseText);
            Notify.Show("Сохранено");
            DOM.get(".menuitem.save").del(".disabled");
            Editor.SaveInProgress = false;
        };

        Editor.RunFile = function () {
            if (Request.Params.url) {
                window.open(Request.GetUrl(Request.Params.url));
                return;
            }
            if (Request.Params.file) {
                var url = Request.Params.file;
                if (Request.Params.SystemPath) {
                    url = Request.Params.SystemPath + "/" + url;
                }
                if (Request.Params.UserDomain) {
                    url = "http://" + Request.Params.UserDomain + "/" + url;
                }
                window.open(url);
            }
            var url = new Url(window.location + "");
            url.search = "";
            window.open(url);
        };

        Editor.RunOnServer = function () {
            var content = Editor.TextEditor.getValue();
            Net.POST("http://ilab.web-manufacture.net", content, function (data) {
                console.log("RUN ON SERVER");
                console.log(data);
                Notify.Show(data);
            });
        };

        Editor.OpenLogWindow = function () {
            //alert('окно отладчика открывает '+ Request.Params.url);
            var logWindowUrl = window.location.protocol + '//' + window.location.host + '/Monitoring.htm?url=' + encodeURIComponent(Request.Params.url);
            window.open(logWindowUrl);
            return;
        };


        Editor.TextReindentAll = function () {
            this.TextEditor.reindent();
        };

        Editor.KeyHandler = function (event) {
            // Ctrl + S event;
            if (event.ctrlKey && event.keyCode > 0) {
                console.log(event.keyCode);
                if (event.ctrlKey && event.keyCode == 83) {
                    Editor.SaveFile();
                    event.stopPropagation();
                    event.preventDefault();
                    return false;
                }
                if (event.ctrlKey && event.charCode == 104) {
                    DOM("#hkHint").show();
                    return false;
                }
            }
            return true;
        };

        Editor.ChangeTheme = function (theme) {
            Editor.TextEditor.setTheme(theme);
            window.localStorage.setItem("klab_ace_theme", theme);
        };

        WS.DOMload(Editor.Init);


    </script>

    <style type="text/css">
        body {
            background-color: #fff;
        }

        #VersionHistory {
            left: 40%;
            top: 40%;
            border: solid 1px red;
            width: 400px;
            height: 300px;
        }

        #VersionHistory .keyAr {
            color: navy;
            cursor: pointer;
        }

        #VersionHistory .keyAr:hover {
            font-weight: bold;
        }

        #EditorArea {
            width: 100%;
            line-height: 1.2em;
            font-size: 14px;
            font-family: monospace;
            height: 100%;
        }

        .header.toolbar .menuitem.disabled {
            background-color: red;
        }

        .header.toolbar .menuitem.active {
            background-color: darkorange;
        }

        #hkHint {
            background-color: white;
            border: 1px solid navy;
            border-radius: 10px 10px 10px 10px;
            cursor: default;
            font-size: 16px;
            height: 85%;
            text-align: left;
            width: 12%;
            opacity: 0.88;
            position: fixed;
            top: 4%;
            right: 1%;
            z-index: 20;
            padding: 7px;
            font-size: 12px;
            overflow: hidden;
        }

        #hkHint .event {
            color: #333;
        }

        #hkHint .event.first {
            background-color: yellow;
        }

        #hkHint .event.error {
            color: red;
        }

        #ServerToolBtn:active {
            border: 1px solid green;
        }

        #ServerToolBtn.new {
            background-color: gray;
        }

        #ServerToolBtn.working {
            background-color: green;
        }

        #ServerToolBtn.exited {
            background-color: purple;
        }

        #ServerToolBtn.error {
            background-color: red;
        }
    </style>
</head>
<body>
<div id='EditorArea'></div>

<div id='hkHint' class="" onclick="this.hide();">
    <h2>
        Список новых фишек</h2>
    <hr/>
    <ul>
        <li>Автозакрывание тагов</li>
        <li>Подсветка похожих выделенных слов</li>
        <li>Улучшено форматирование JS</li>
        <li>Поиск и замена</li>
        <li>Что-то еще, не помню что :)</li>
        <li>Исправлен глюк с выделением</li>
        <li>Исправлен глюк с длинной строкой</li>
        <li>Исправлен глюк с отменой</li>
        <li>Исправлен глюк с позицией воода</li>
        <li>Исправлен глюк с форматированием JS</li>
    </ul>
    <h2>
        Список горячих клавиш</h2>
    (работает только в Firefox)
    <hr/>
    <div class='hot-key'>
        <span class='key-combination'>Shift + Tab </span>Переформатировать выделенный текст
        (отступы)
    </div>
    <div class='hot-key'>
        <span class='key-combination'>Ctrl + S </span>Сохранить
    </div>
    <div class='hot-key'>
        <span class='key-combination'>Ctrl + F, Ctrl + S, Ctrl + R </span>Найти текст\ (Следующий)
        \ (Предыдущий)
    </div>
    <div class='hot-key'>
        <span class='key-combination'>Ctrl + A </span>Выделить весь файл
    </div>
    <div class='hot-key'>
        <span class='key-combination'>Ctrl + X, Ctrl + C, Ctrl + V </span>Буфер обмена
    </div>
    <div class='hot-key'>
        <span class='key-combination'>Ctrl + Z, Ctrl + Shift + Z </span>Отменить\Вернуть
    </div>
    <div class='hot-key'>
        <span class='key-combination'>Ctrl + Пробел </span>Автодополнение (в доработке)
    </div>
</div>
<include url='http://services.web-manufacture.net/ui/Toolbars.htm'></include>
<include url='http://services.web-manufacture.net/ui/FrameWin.htm'></include>
<include url='http://services.web-manufacture.net/ui/Win.htm'></include>
<include url='http://services.web-manufacture.net/ui/Notification.htm'></include>

<div id='Toolbar' class="header toolbar">
    <div class="menuitem save" tooltip="Сохранить" icon="http://system.web-manufacture.net/Images/save-mini.png"
         onclick="Editor.SaveFile();" style="background-image: url(http://system.web-manufacture.net/Images/save-mini.png);
													 background-position: 50% 50%; background-repeat: no-repeat no-repeat;">
    </div>
    <div class="menuitem save history" tooltip="История сохранений"
         icon="http://cdn1.iconfinder.com/data/icons/softwaredemo/PNG/32x32/Hourglass.png"
         onclick="Editor.ShowHistory();" style="background-image: url(http://cdn1.iconfinder.com/data/icons/softwaredemo/PNG/32x32/Hourglass.png);
														background-position: 50% 50%; background-repeat: no-repeat no-repeat;">
    </div>
    <div class="menuitem reload" tooltip="Перегрузить"
         icon="http://cdn1.iconfinder.com/data/icons/humility-icons-MERGE/24x24/stock/gtk-refresh.png"
         onclick="Editor.Reload();" style="background-image: url(http://cdn1.iconfinder.com/data/icons/humility-icons-MERGE/24x24/stock/gtk-refresh.png);
												   background-position: 50% 50%; background-repeat: no-repeat no-repeat;">
    </div>
    <div class="separator">
    </div>
    <div class="menuitem color" style="background-size: 48px; background-image: url(http://system.web-manufacture.net/Images/color.png);
											   background-position: 50% 50%; background-repeat: no-repeat no-repeat;"
         tooltip="Палитра"
         icon="http://system.web-manufacture.net/Images/color.png"
         onclick="if (window.CPalette) CPalette.Show(); else M.LoadModule('http://system.web-manufacture.net/ColorPalette.htm');">
    </div>

    <div class="menuitem reformat" tooltip="Переформатировать"
         icon="http://cdn1.iconfinder.com/data/icons/humility-icons-MERGE/24x24/stock/gtk-refresh.png"
         onclick="Editor.Reformat()" style="background-image: url(http://cdn1.iconfinder.com/data/icons/humility-icons-MERGE/24x24/stock/gtk-refresh.png);
												   background-position: 50% 50%; background-repeat: no-repeat no-repeat;">
    </div>
    <div class="separator">
    </div>
    <div class="menuitem" id='ServerRunBtn' tooltip="RunServer"
         icon='http://cdn2.iconfinder.com/data/icons/stilllife/48x48/apps/gnome-server-config.png'
         onclick='Editor.RunOnServer();'
    >
    </div>
    <div class="menuitem" tooltip="Запустить" icon="http://system.web-manufacture.net/Images/emblem-system.png"
         onclick="Editor.RunFile();" style="background-image: url(http://system.web-manufacture.net/Images/emblem-system.png);
													background-position: 50% 50%; background-repeat: no-repeat no-repeat;">
    </div>
    <div class="separator">
    </div>

    <select id="EditorThemeSelector" size="1" onchange="Editor.ChangeTheme(this.value);">
        <optgroup label="Bright">
            <option value="ace/theme/chrome">Chrome</option>
            <option value="ace/theme/clouds">Clouds</option>
            <option value="ace/theme/crimson_editor">Crimson Editor</option>
            <option value="ace/theme/dawn">Dawn</option>
            <option value="ace/theme/dreamweaver">Dreamweaver</option>
            <option value="ace/theme/eclipse">Eclipse</option>
            <option value="ace/theme/github">GitHub</option>
            <option value="ace/theme/iplastic">IPlastic</option>
            <option value="ace/theme/solarized_light">Solarized Light</option>
            <option value="ace/theme/textmate">TextMate</option>
            <option value="ace/theme/tomorrow">Tomorrow</option>
            <option value="ace/theme/xcode">XCode</option>
            <option value="ace/theme/kuroir">Kuroir</option>
            <option value="ace/theme/katzenmilch">KatzenMilch</option>
            <option value="ace/theme/sqlserver">SQL Server</option>
        </optgroup>
        <optgroup label="Dark">
            <option value="ace/theme/ambiance">Ambiance</option>
            <option value="ace/theme/chaos">Chaos</option>
            <option value="ace/theme/clouds_midnight">Clouds Midnight</option>
            <option value="ace/theme/cobalt">Cobalt</option>
            <option value="ace/theme/idle_fingers">idle Fingers</option>
            <option value="ace/theme/kr_theme">krTheme</option>
            <option value="ace/theme/merbivore">Merbivore</option>
            <option value="ace/theme/merbivore_soft">Merbivore Soft</option>
            <option value="ace/theme/mono_industrial">Mono Industrial</option>
            <option value="ace/theme/monokai">Monokai</option>
            <option value="ace/theme/pastel_on_dark">Pastel on dark</option>
            <option value="ace/theme/solarized_dark">Solarized Dark</option>
            <option value="ace/theme/terminal">Terminal</option>
            <option value="ace/theme/tomorrow_night">Tomorrow Night</option>
            <option value="ace/theme/tomorrow_night_blue">Tomorrow Night Blue</option>
            <option value="ace/theme/tomorrow_night_bright">Tomorrow Night Bright</option>
            <option value="ace/theme/tomorrow_night_eighties">Tomorrow Night 80s</option>
            <option value="ace/theme/twilight">Twilight</option>
            <option value="ace/theme/vibrant_ink">Vibrant Ink</option>
        </optgroup>
    </select>
    <div class="separator">
    </div>

    <!--
<div class="menuitem" tooltip="Restart on Server" icon="http://cdn1.iconfinder.com/data/icons/UltimateGnome/32x32/apps/gnome-session-reboot.png" onclick="Editor.ServerRestart();">
</div>
<div class="menuitem" tooltip="RUN on Server" icon="http://cdn1.iconfinder.com/data/icons/SUPERVISTA/security/png/48/status.png" onclick="Editor.ServerRun();">
</div>
<div class="menuitem" tooltip="Stop on Server" icon="http://cdn1.iconfinder.com/data/icons/CrystalClear/32x32/actions/exit.png" onclick="Editor.ServerStop();">
</div>
-->
    <div class="menuitem invisible" tooltip="RUN" icon="http://system.web-manufacture.net/Images/exec.png"
         onclick="window.open('system.index.htm?url=' + encodeURIComponent(Editor.GetFileUrl()));">
    </div>
    <div class="menuitem invisible" tooltip="Open log Window"
         icon="http://cdn1.iconfinder.com/data/icons/CrystalClear/32x32/apps/xconsole.png"
         onclick="Editor.OpenLogWindow();">
    </div>
    <div class="menuitem invisible" id='ServerToolBtn' class='server-tool' tooltip="ServerTool"
         icon='http://cdn2.iconfinder.com/data/icons/stilllife/48x48/apps/gnome-server-config.png'>
    </div>
    <div class="separator">
    </div>
    <input id='urlBar' type='text' class='invisible'/>
    <div class='menuitem  invisible' tooltip='Go URL'
         icon='http://cdn1.iconfinder.com/data/icons/snowish/48x48/actions/forward.png'
         onclick='Editor.GoUrl(DOM("#urlBar").value, event.ctrlKey);'>
    </div>
    <div class='menuitem  invisible' tooltip='Go URL ALL'
         icon='http://cdn1.iconfinder.com/data/icons/snowish/48x48/actions/finish.png'
         onclick='Editor.GoUrlAll(DOM("#urlBar").value, event.ctrlKey);'>
    </div>
    <div class='menuitem  invisible' tooltip='Go URL in new window'
         icon='http://cdn3.iconfinder.com/data/icons/snowish/48x48/actions/document-new.png'
         onclick='Editor.GoUrl(DOM("#urlBar").value, true);'>
    </div>
    <div class="status">
    </div>
</div>
<div id='VersionHistory' class='invisible window smallwindow' title='История' onclick='this.hide();'>
</div>
</body>
</html>
