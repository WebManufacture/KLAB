<!DOCTYPE HTML>

<html>
	<head>
		<title>Monitoring</title>
		<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
		<link type='text/css' rel='stylesheet' href="http://Services.web-manufacture.net/Styles/System.default.css" />
		
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Utils.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/DOM.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Events.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Log.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Url.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Ajax.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Jasp.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Modules.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/ui.js"></script>
		
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Node.js"></script>
		
		<script>
			
			
			
			//var startedServerUrl = Request.Params.url;
			//var startedServerUrlObj = new Url(startedServerUrl);
			
			//var urlToNodesFile = startedServerUrlObj.protocol + '//' + 'nodes.' + startedServerUrlObj.host + startedServerUrlObj.pathname;
			//var urlToLogFile = startedServerUrlObj.protocol + '//' + 'logs.' + startedServerUrlObj.host + '/_' + startedServerUrlObj.path + '.log';
			
			//alert(urlToLogFile);
			
			
			
			
			
			Monitor = {}; 
			
			Monitor.Init = function(){
				Monitor.startDate = new Date();
				Monitor.lastLogDate == null;
				//Monitor.startDate = Monitor.startDate.getTime();
				Monitor.urlParse();
				DOM("#urlBar").set(null, Request.Params.url);
				Monitor.Server = new NodeServer(Monitor.urlToLogFile);
				Monitor.requestLog();
				Monitor.GetServerStatus();
				window.setInterval(Monitor.GetServerStatus, 3000);
				setInterval(Monitor.requestLog, 10000);
			};
			
			//Monitor.urlToLogFile;
			//Monitor.Server;
			Monitor.logLength = 1;
			
			Notify = {};
			
			Notify.Show = function (status, pid) {
				var nf = DOM("#statusMonitor");
				nf.set((new Date()).formatTime() + " " + status +': ' + pid);
				if (status == 'working'){
					nf.set('.server-work');
				};
				if (status == 'exited'){
					nf.set('.server-stop');
				};
				return;
			};
			Notify.Error = function (error) {
				var nf = DOM("#statusMonitor");
				nf.set((new Date()).formatTime() + " " + error);
				nf.set('.error');
				return;
			};
			
			
			Monitor.ServerRun = function () {
				if (Request.Params.url && Monitor.Server) {
					WS.Body.set("@status", "starting");
					WS.Body.add(".loading");
					Monitor.Server.run(Request.Params.url, Monitor.ServerStatus);
					Monitor.requestLog();
					return;
				}
			};
			Monitor.ServerStop = function () {
				if (Request.Params.url && Monitor.Server) {
					WS.Body.set("@status", "stopping");
					WS.Body.add(".loading");
					Monitor.Server.stop(Request.Params.url, Monitor.ServerStatus);
					Monitor.requestLog();
					return;
				}
			};
			Monitor.ServerRestart = function () {
				if (Request.Params.url && Monitor.Server) {
					WS.Body.set("@status", "restarting");
					WS.Body.add(".loading");
					Monitor.Server.reset(Request.Params.url, Monitor.ServerStatus);
					Monitor.requestLog();
					return;
				}
			};
			Monitor.GetServerStatus = function () {
				if (Request.Params.url && Monitor.Server) {
					Monitor.Server.status(Request.Params.url, Monitor.ServerStatus);
				}
			}; 
			
			Monitor.ServerStatus = function (result, status) {
				WS.Body.del(".loading");
				if (status == 200){
					result = JSON.parse(result);
					if (Monitor.Status != result.status){
						Monitor.Status = result.status;
						Notify.Show(result.status, result.pid);
						//window.setTimeout(Monitor.requestLog, 1000);
						//window.setTimeout(Monitor.requestLog, 2000);
						//window.setTimeout(Monitor.requestLog, 3000);
						WS.Body.set("@status", result.status);
					}
				}else{
					Notify.Error("HTTP status: " + status);
				}
			}; 
			
			Monitor.StatusMonitor = function(message){
				
			};
			
			Monitor.GoUrl = function(url){
				if (url){
					window.location = "Monitoring.htm?url=" + encodeURIComponent(url);
				}
			}; 
			
			Monitor.urlParse = function(){
				var startedServerUrl = Request.Params.url;
				var startedServerUrlObj = new Url(startedServerUrl);
				Monitor.urlToLogFile = startedServerUrlObj.protocol + '//' + 'logs.' + startedServerUrlObj.host + '/_' + startedServerUrlObj.path + '.log';
			};
			
			//Monitor.responseConverter = function()
			
			Monitor.requestLog = function(){
				//Monitor.LogTimeout = setTimeout(Monitor.requestLog, 3000);
				Monitor.Server.get(Monitor.urlToLogFile, Monitor.showLog);
			};
			
			Monitor.showLog = function(){
				
				if (Monitor.logStrLength == this.responseText.length) return;
				
				var logArry = JSON.parse('[' + this.responseText + '[]]');
				
				var logDiv = DOM.get('#logsMonitor');
				
				var lastLogItem = logDiv.get(".log-item"); //берем первый сначала
				
				for (var i = (logArry.length - 2); i > 0; i--) {
					var item = logArry[i];
					var dateOfLog = new Date(item[0]);
					if (Monitor.lastLogDate && dateOfLog <= Monitor.lastLogDate) break;
					var logType = item[1];
					var logMassage = '';
					for (var j = 2; j < item.length; j++) {
						logMassage += item[j] + ' ';
					};
					var newLogDiv = DOM.div('.log-item.' + logType);
					if (dateOfLog < Monitor.startDate) newLogDiv.add(".old");
					newLogDiv.div(".datetime", dateOfLog.formatTime());
					if (logType == "error"){
						logMassage = Monitor.FormatError(logMassage);	
					}
					newLogDiv.div(".message", logMassage);
					if (lastLogItem){
						logDiv.insertBefore(newLogDiv, lastLogItem);
					}
					else{
						logDiv.add(newLogDiv);
					}
				};
				
				Monitor.lastLogDate = new Date(logArry[logArry.length - 2][0]);
				Monitor.logLength = logArry.length;
				Monitor.logStrLength = this.responseText.length;		
			};
			
			Monitor.FormatError = function(error){
				try{
					if (typeof (error) != "object") {
						
						error = JSON.parse(error);
					}
					
					
					var errorDiv = DOM.div();
					var stack = error.stack.split('\n');
					for (var i = 0; i < stack.length; i++){
						var line = stack[i];
						line = line.replace(/</g, "&lt;").replace(/>/g, "&gt;");
						line = line.replace(/\s?at\s/, "");
						var sl = errorDiv.div(".stack-line");
						var iofaddr = line.indexOf("(");
						if (iofaddr >= 0){
							line = line.replace(/\((\w):\\/, "($1\\");
							var mod = /\(([^:]+):(\d+):(\d+)\)/.exec(line);
							line = line.substr(0, iofaddr);
							sl.div(".module-name.stack-part.stack-part-prefix", mod[1] + " : " + mod[2] + "(" + mod[3] + ")");
							//sl.div(".row.stack-part.stack-part-prefix", mod[2] + "(" + mod[3] + ")");
							//sl.div(".col.stack-part.stack-part-prefix", mod[3]);
							sl.div(".function.stack-part", line);
							
						}
						else{
							sl.set(null, line);	
						}
					}
				}
				catch (ex){
					return "Error parsing object: " + error;
				}
				return errorDiv.innerHTML;
			};
			
			Monitor.repeater = function(){ //по идее не нужно делать функцию.
				
				return;
			};	
			
			
			WS.DOMload(Monitor.Init);	
			
		</script>
		
		
		<style>
			
			body{
				padding-top: 100px;	
			}
			
			body.loading .header.toolbar .menuitem.server-control {
				display: none;	
			}
			/*
			.server-button {
			border: 1px solid silver;
			border-radius: 10px 10px 10px 10px;
			cursor: pointer;
			display: block;
			float: left;
			font-size: 10px;
			height: 50px;
			margin: 2px;
			text-align: center;
			vertical-align: middle;
			width: 50px;	
		}
			*/
			#statusMonitor {
				border: 1px solid silver;
				border-radius: 10px 10px 10px 10px;
				display: block;
				float: left;
				font-size: 12px;
				height: 50px;
				margin: 2px;
				text-align: center;
				vertical-align: middle;
				width: 150px;		
			}
			
			#logsMonitor {
				display: block;
				font-size: 12px;
				padding: 2px;
				text-align: left;
				font-family: monospace;
			}
			
			#logsMonitor .log-item{
				clear: both;
			}
			
			#logsMonitor .log-item.old:first-child{
				margin-top: 10px;
			}
			
			#logsMonitor .log-item.old{
				color: #666;
			}
			
			#logsMonitor .log-item div{
				float: left;
				padding-left: 10px;				
			}
			
			
			#logsMonitor .log-item.error .datetime{
				color: red;
			}
			
			#logsMonitor .log-item.error .message .stack-line:first-child{
				color: red;
			}
			
			
			#logsMonitor .log-item.error .stack-line{
				float: none;	
				clear:both;
			}
			
			#logsMonitor .log-item.error .stack-line .stack-part-prefix{
				width: 150px;
				text-align: left;
			}
			
			#statusMonitor.server-work {
				background-color: #99FF99;
			}
			#statusMonitor.server-stop {
				background-color: #FFFF99;
			}
			#statusMonitor.error {
				background-color: #FF3366;
			}
			
			.header.toolbar .menuitem.server-control:active{
				border:  1px solid black;
			}
			
			.header.toolbar .menuitem.url-go {
				float: right;
			}
			
			.header.toolbar #urlBar {
				border: 1px solid silver;
				border-radius: 5px;
				position: relative;
				top: 17px;
				width: 500px;
				float: right;
			}
			
			
		</style>
		
	</head>
	<body>
		
		<include url='http://services.web-manufacture.net/UI/toolbars.htm'></include>
		<div class='header toolbar'>
			
			<div class='menuitem server-control' id='serverStart' onclick="Monitor.ServerRun();">
				СТАРТ
			</div>
			<div class='menuitem server-control' id='serverStop' onclick="Monitor.ServerStop();">
				СТОП
			</div>
			<div class='menuitem server-control' id='serverRestart' onclick="Monitor.ServerRestart();">
				РЕСТАРТ
			</div>
			<div  id='statusMonitor'>
			</div>
			
			<div class="menuitem server-control url-go" onclick="Monitor.GoUrl(DOM('#urlBar').innerHTML);">GO!</div>
			<div id="urlBar" contenteditable="true" >http://web-manufacture.net:8000/</div>
			
			
		</div>
		
		<div  id='logsMonitor'>
		</div>
	</body>
	
</html>	  